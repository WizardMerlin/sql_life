范式:

第一范式:  数据表的数据列不可以再分.
   例如你涉及一个字段叫做联系方式, 那么该字段就是可以再分的, 例如电话,手机,地址,email,QQ,微信,Twitter等等.
   但是生日就不要拆分成年月日了; 姓名的话,国外是拆分存储的.
   
第二范式: (数据表中的非关键字段不存在对任一候选关键字段部分函数依赖, 都是完全依赖)
    1. 字段之间不存在任何函数关系
       例如表中已经有了单价和数量字段, 就没必要在设置一个总价字段了, 因为可以计算出来.
       
    2. 非完全依赖造成了冗余和异常
       	学生选课, 如果选课表, 讲学生编号和课程编号还有学分放在一起, 那么就会有很多重复.
        (因为一个学生可以选很多门课程)所以拆分成多个表.
		
	学生选课应该这样设计:
	student表:
	stuid, stuname
		
	course表:
	cid, cname, credit(学分)
		
	选课表:
	stuid  foreign key references student(stuid)
	cid    foreign key references course(cid)
	score得分/成绩

	这样设计选课表的另外一个原因是因为, 如何设计成一张表, 那么cname, credit是完全依赖cid的, 
    而对于组合键(stuid和cid)是部分依赖; 选课表的字段对于联合主键stuid和cid也是完全依赖.
		
第三范式: (非主关键字不能依赖其他非主关键字; 非主关键字之间不能有函数关系--依赖或者传递关系)
    1. 非主关键间字不能有依赖关系而只能依赖关键字段.(子表依赖源数据表或者总表, 反之则不成立)
    
    例如一个学校有多个学生.
    
    school: sid, sname
    student: stuid, stuname, sid references school(sid)
    
    
范式给出了设计表时的建议, 但是并没有解决表具体如何设计的问题.
真正如何设计, 还是需要考虑具体的业务场景.



二三结合:
非主依赖主(三), 而且是完全依赖(二).



基数关系


大致上有:
  1. 一对一关系 (第一范式)
  2. 一对多关系 (第三范式)
  3. 多对多关系 (第二范式)

